@using Eudwia.Shared.Features.Members.Payments
@using Eudwia.Shared.Enums
@using Microsoft.AspNetCore.Components
@using Color = MudBlazor.Color
@inject HttpClient _httpClient
@inject ISnackbar _snackbar

<MudDialog>
    <DialogContent>
        <MudForm Model="@_model" @ref="@_form">
            <MudGrid>
                <MudItem xs="12" md="12">
                    <MudSelect Variant="Variant.Outlined" T="PaymentType" @bind-Value="@_model.PaymentType" Validation="@(_validator.ValidateValue)" For="@(() => _model.PaymentType)" Immediate="true" Label="Type" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var paymentType in Enum.GetValues<PaymentType>())
                        {
                            <MudSelectItem T="PaymentType" Value="@paymentType">@paymentType.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudDatePicker Variant="Variant.Outlined" Label="Date" MaxDate="DateTime.Today" @bind-Date="_model.PaymentDate" Validation="@(_validator.ValidateValue)" For="@(() => _model.PaymentDate)"/>
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudNumericField Variant="Variant.Outlined" Label="Montant" @bind-Value="_model.Amount" Validation="@(_validator.ValidateValue)" For="@(() => _model.Amount)" Adornment="Adornment.End" AdornmentText="CHF" HideSpinButtons="true"/>
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="_model.Note" Validation="@(_validator.ValidateValue)" For="@(() => _model.Note)" Immediate="true" Label="Note" Lines="3"/>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Annuler</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ajouter</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public Guid MemberId { get; set; }

    private MudForm _form = new();
    private MembersAddPaymentCommand _model = new();
    private readonly MembersAddPaymentCommandValidator _validator = new();

    private async Task Submit()
    {
        if (_form.IsValid)
        {
            var result = await _httpClient.PostAsJsonAsync($"/api/members/{MemberId}/payments/", _model);

            if (result.IsSuccessStatusCode)
            {
                _snackbar.Add("Le paiment a bien étà enregistré.", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var errors = await result.Content.ReadAsStringAsync();
                _snackbar.Add(errors, Severity.Warning);
            }
        }
    }

    private void Cancel()
    {
        _form = new MudForm();
        _model = new MembersAddPaymentCommand();
        MudDialog.Cancel();
    }

}