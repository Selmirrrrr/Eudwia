@page "/members"
@using Eudwia.Shared.Features.Members.List
@using Color = MudBlazor.Color
@inject ISnackbar _snackbar
@inject HttpClient _httpClient
@attribute [Authorize]

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Membres</MudText>
@if (!_loaded)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
}
else
{
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudTable RowsPerPage="33"
                      Items="@_members"
                      FixedHeader="true"
                      FixedFooter="true"
                      Virtualize="true"
                      Hover="true"
                      Dense="true"
                      Striped="true"
                      Filter="new Func<MembersListViewModel, bool>(FilterFunc)" OnRowClick="RowClickEvent" T="MembersListViewModel">
                <ToolBarContent>
                    <MudTextField @bind-Value="_searchString" Placeholder="Recherche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    <MudSpacer/>
                    <MudButton Size="Size.Small" OnClick="CreateMember" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Nouveau membre</MudButton>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Nom</MudTh>
                    <MudTh>Prénom</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Tél.</MudTh>
                    <MudTh>Membre depuis</MudTh>
                    <MudTh>Mois payés @(DateTime.Now.Year)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nom">@context.LastName</MudTd>
                    <MudTd DataLabel="Prénom">@context.FirstName</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="Tél.">@context.Phone</MudTd>
                    <MudTd DataLabel="Membre depuis">@context.MemberSince.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Mois payés cette année">
                        <MudLink Href="@($"members/{@context.Id}")">
                            @if (context.MonthsPaid == 0)
                            {
                                <MudChip Variant="Variant.Text" Color="Color.Error">
                                    <b>@context.MonthsPaid</b>
                                </MudChip>
                            }
                            else if (context.MonthsPaid < DateTime.Now.Month)
                            {
                                <MudChip Variant="Variant.Text" Color="Color.Warning">
                                    <b>@context.MonthsPaid</b>
                                </MudChip>
                            }
                            else if (context.MonthsPaid >= DateTime.Now.Month)
                            {
                                <MudChip Variant="Variant.Text" Color="Color.Success">
                                    <b>@context.MonthsPaid</b>
                                </MudChip>
                            }
                            else
                            {
                                <MudChip Variant="Variant.Text" Color="Color.Info">
                                    <b>@context.MonthsPaid</b>
                                </MudChip>
                            }
                        </MudLink>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
}

@code
{
    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    private List<MembersListViewModel> _members = new();
    private string _searchString = string.Empty;
    private bool _loaded;

    protected override async Task OnInitializedAsync()
    {
        _members = (await _httpClient.GetFromJsonAsync<List<MembersListViewModel>>("api/members") ?? new List<MembersListViewModel>())
            .OrderBy(o => o.LastName)
            .ThenBy(o => o.FirstName)
            .ToList();
        _loaded = true;
    }

    private bool FilterFunc(MembersListViewModel member) => Filter(member, _searchString);

    private static bool Filter(MembersListViewModel member, string searchString)
    {
        return string.IsNullOrWhiteSpace(searchString) ||
               member.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               member.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               member.City.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }

    private void RowClickEvent(TableRowClickEventArgs<MembersListViewModel> tableRowClickEventArgs)
    {
        NavigationManager.NavigateTo($"members/{tableRowClickEventArgs.Item.Id}");
    }

    private void CreateMember()
    {
        NavigationManager.NavigateTo($"members/create");
    }
}