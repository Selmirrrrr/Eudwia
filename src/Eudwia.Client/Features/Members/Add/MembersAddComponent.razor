@page "/members/create"
@using Microsoft.AspNetCore.Components
@using Eudwia.Shared.Enums
@using Eudwia.Shared.Features.Countries.List
@using Eudwia.Shared.Features.Members.Create
@using Color = MudBlazor.Color
@inject HttpClient _httpClient
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager

@attribute [Authorize]

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Ajouter un membre</MudText>

<MudForm Model="@_model" @ref="@Form">
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText>Personnel</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="4">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="_model.FirstName" Validation="@(_validator.ValidateValue)" For="@(() => _model.FirstName)" Immediate="true" Label="Prénom"/>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="_model.LastName" Validation="@(_validator.ValidateValue)" For="@(() => _model.LastName)" Immediate="true" Label="Nom"/>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="_model.GivenName" Validation="@(_validator.ValidateValue)" For="@(() => _model.GivenName)" Immediate="true" Label="Surnom"/>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudDatePicker Variant="Variant.Outlined" Label="Date de naissance" @bind-Date="_model.BirthDate" Validation="@(_validator.ValidateValue)" For="@(() => _model.BirthDate)"/>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudDatePicker Variant="Variant.Outlined" Label="Membre depuis" @bind-Date="_model.MemberSince" Validation="@(_validator.ValidateValue)" For="@(() => _model.MemberSince)"/>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText>Adresse</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="5">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="_model.StreetLine1" Validation="@(_validator.ValidateValue)" For="@(() => _model.StreetLine1)" Immediate="true" Label="Rue 1"/>
                        </MudItem>
                        <MudItem xs="12" md="1">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="_model.HouseNumber" Validation="@(_validator.ValidateValue)" For="@(() => _model.HouseNumber)" Immediate="true" Label="N°"/>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="_model.StreetLine2" Validation="@(_validator.ValidateValue)" For="@(() => _model.StreetLine2)" Immediate="true" Label="Rue 2"/>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="_model.ZipCode" Validation="@(_validator.ValidateValue)" For="@(() => _model.ZipCode)" Immediate="true" Label="NPA"/>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="_model.City" Validation="@(_validator.ValidateValue)" For="@(() => _model.City)" Immediate="true" Label="Ville"/>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="_model.State" Validation="@(_validator.ValidateValue)" For="@(() => _model.State)" Immediate="true" Label="Canton"/>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudAutocomplete T="CountriesListViewModel" Label="Pays" @bind-Value="@_selectedCountry" SearchFunc="@SearchCountries"
                                             ResetValueOnEmptyText="true"
                                             Variant="Variant.Outlined"
                                             CoerceText="true" CoerceValue="true"
                                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary"/>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText>Contact</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="3">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="_model.Email" Validation="@(_validator.ValidateValue)" For="@(() => _model.Email)" Immediate="true" Label="Email" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Email"/>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudTextField Variant="Variant.Outlined" @bind-Value="_model.PhoneNumber" Validation="@(_validator.ValidateValue)" For="@(() => _model.PhoneNumber)" Immediate="true" Label="Téléphone" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Phone"/>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudSelect Variant="Variant.Outlined" T="Language" @bind-Value="@_model.Language" Validation="@(_validator.ValidateValue)" For="@(() => _model.Language)" Immediate="true" Label="Langue" AnchorOrigin="Origin.BottomCenter">
                                @foreach (var language in Enum.GetValues<Language>())
                                {
                                    <MudSelectItem T="Language" Value="@language">@language.ToString()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudGrid>
                                <MudItem xs="3" md="3">
                                    <MudCheckBox @bind-Checked="@_model.ContactByEMail" Size="Size.Medium">E-Mail</MudCheckBox>
                                </MudItem>
                                <MudItem xs="3" md="3">
                                    <MudCheckBox @bind-Checked="@_model.ContactByMail" Size="Size.Medium">Courrier</MudCheckBox>
                                </MudItem>
                                <MudItem xs="3" md="3">
                                    <MudCheckBox @bind-Checked="@_model.ContactByPhone" Size="Size.Medium">Téléphone</MudCheckBox>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText>Notes</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Variant="Variant.Outlined" @bind-Value="_model.Note" Validation="@(_validator.ValidateValue)" For="@(() => _model.Note)" Immediate="true" Label="Note" Lines="5"/>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" md="12">
            <MudPaper Class="d-flex flex-row-reverse py-2 px-1">
                <MudButton Class="pa-2 mx-2" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(async () => await Submit())">Ajouter</MudButton>
                <MudButton Class="pa-2 mx-2" Variant="Variant.Filled" Color="Color.Dark" OnClick="@(async () => await Reset())">Annuler</MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    private MudForm Form { get; set; } = default!;
    private MembersCreateCommand _model = new() { CountryId = Guid.Parse("9bc1f1a9-7696-42e4-89aa-c93800704582") };
    private IEnumerable<CountriesListViewModel> _countries = new List<CountriesListViewModel>();
    private CountriesListViewModel _selectedCountry = new();
    private readonly MembersCreateCommandValidator _validator = new();

    protected override async void OnParametersSet()
    {
        await base.OnParametersSetAsync();
        await Reset();
    }

    protected override async Task OnInitializedAsync()
    {
        _countries = (await _httpClient.GetFromJsonAsync<List<CountriesListViewModel>>("api/countries") ?? new List<CountriesListViewModel>()).OrderBy(c => c.Name);
    }

    private async Task Submit()
    {
        try
        {
            var validationResult = await _validator.ValidateAsync(_model);
            if (validationResult.IsValid)
            {
                _model.CountryId = _selectedCountry.Id;
                var result = await _httpClient.PostAsJsonAsync($"api/members/", _model);

                if (result.IsSuccessStatusCode)
                {
                    _snackbar.Add("Le membre a bien été ajouté à la base données.", Severity.Success);
                    _navigationManager.NavigateTo($"/members/{(await result.Content.ReadAsStringAsync()).Trim('\"')}");
                }
                else
                {
                    var errors = await result.Content.ReadAsStringAsync();
                    _snackbar.Add(errors, Severity.Warning);
                }
            }
            else
            {
                _snackbar.Add("Veuillez vérifier les champs du formulaire." + validationResult.ToString(), Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private Task Reset()
    {
        _model = new MembersCreateCommand
        {
            FirstName = string.Empty,
            LastName = string.Empty,
            GivenName = string.Empty,
            StreetLine1 = string.Empty,
            StreetLine2 = string.Empty,
            HouseNumber = string.Empty,
            City = string.Empty,
            ZipCode = string.Empty,
            State = string.Empty,
            CountryId = Guid.Parse("9bc1f1a9-7696-42e4-89aa-c93800704582"),
            Email = string.Empty,
            PhoneNumber = string.Empty,
            BirthDate = DateTime.Now.AddYears(-20),
            MemberSince = DateTime.Now,
            Language = Language.French,
            ContactByMail = true,
            ContactByPhone = true,
            ContactByEMail = true,
            Note = string.Empty
        };
        _selectedCountry = new CountriesListViewModel();
        Form.ResetValidation();
        return Task.CompletedTask;
    }

    private Task<IEnumerable<CountriesListViewModel>> SearchCountries(string arg)
    {
        return Task.FromResult(_countries.Where(c => c.Name.StartsWith(arg, StringComparison.OrdinalIgnoreCase)));
    }

}