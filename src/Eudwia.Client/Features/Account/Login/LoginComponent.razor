@page "/account/login"
@using Eudwia.Shared.Features.Authentication.Login
@using Color = MudBlazor.Color

@layout LoginLayout

@inject Providers.TokenAuthenticationStateProvider _tokenAuthenticationStateProvider
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager

@if (_showErrorAlert)
{
    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="() => CloseMe(true)">Invalid username or password!</MudAlert>
}

<MudForm @ref="_form">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="mt-4">Connexion</MudText>

    <MudTextField T="string" @bind-Value="@Email" Required="true" Label="E-mail " Variant="Variant.Outlined" Class="my-6"></MudTextField>

    <MudTextField @bind-Value="@Password" Label="Password " Required="true" Variant="Variant.Outlined" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="TogglePasswordVisibility"/>

    @* <div Class="d-flex justify-space-between align-center"> *@
    @*     <MudLink Href="/authentication/forgot-password">Forgot pwd?</MudLink> *@
    @* </div> *@
    <MudSpacer></MudSpacer>
    <MudButton Class="mt-6" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" OnClick="HandleSubmit">Connexion</MudButton>
</MudForm>

@code {
    private bool _showErrorAlert;

    private string Password { get; set; } = string.Empty;
    private string Email { get; set; } = string.Empty;

    private LoginCommand _model = new();

    private MudForm? _form;

    private async Task HandleSubmit()
    {
        _model = new LoginCommand
        {
            Email = Email,
            Password = Password
        };

        var response = await _httpClient.PostAsJsonAsync("api/account/login", _model);
        var loginResult = await response.Content.ReadFromJsonAsync<LoginResult>();
        if (loginResult?.Successful == true)
        {
            await _tokenAuthenticationStateProvider.Login(loginResult.Token);
            _navigationManager.NavigateTo("/personal/dashboard");
        }
        else
            _showErrorAlert = true;
    }

    bool _passwordVisibility;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private void CloseMe(bool value)
    {
        _showErrorAlert = !value;
    }
    }