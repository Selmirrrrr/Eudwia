@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using MosqueLife.Shared.Models.Authentication
@page "/authentication/register"
@layout LoginLayout
@inject Providers.TokenAuthenticationStateProvider TokenAuthenticationStateProvider
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<br />
@if (showErrorAlert)
{
    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))">
        @foreach (var item in apiErrors)
        {
            <span>@item</span>
        }
    </MudAlert>
}

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

    <MudText Typo="Typo.h4" GutterBottom="true">Sign Up</MudText>
    <MudText>Already have an account? <MudLink Href="/authentication/login">Sign In</MudLink></MudText>

    <MudTextField T="string" @bind-Value="model.Firstname" Required="true" RequiredError="First name is required!" Label="First Name " Variant=" Variant.Outlined" Class="mt-4"></MudTextField>
    <MudTextField T="string" @bind-Value="model.Lastname" Required="true" RequiredError="Last name is required!" Label="Last Name " Variant=" Variant.Outlined" Class="mt-4"></MudTextField>

    <MudTextField T="string" @bind-Value="model.Email" Required="true" RequiredError="Email is required!" Label="E-mail " Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" Variant=" Variant.Outlined" Class="mt-4" Fo></MudTextField>

    <MudTextField T="string" Label="Password " @bind-Value="model.Password" Variant="Variant.Outlined"
                  InputType="InputType.Password"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                  RequiredError="Password is required!" Class="mt-4" />
    <MudTextField T="string"
                  Label="Enter password again " @bind-Value="model.ConfirmPassword" Variant="Variant.Outlined" InputType="InputType.Password"
                  Class="mt-4" />

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success && !isBusy)" OnClick="() => HandleSubmit()" Size="Size.Large" FullWidth="true" Class="mt-4">Register</MudButton>
</MudForm>

@code {
    private bool success = default;
    private bool isBusy = default;


    private bool showErrorAlert = false;
    private RegisterModel model = new RegisterModel();

    private string[] errors = { };
    private MudForm? form;

    List<string> apiErrors = new List<string>{ };

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    async Task HandleSubmit()
    {
        isBusy = false;
        success = false;

        var response = await HttpClient.PostAsJsonAsync("api/account/register/", model);

        var registerResult = await response.Content.ReadFromJsonAsync<RegisterResult>();

        if (registerResult?.Successful == true)
            NavigationManager.NavigateTo("authentication/login");
        else
        {
            showErrorAlert = true;
            if (registerResult?.Errors.Any() == true)
                apiErrors.AddRange(registerResult.Errors);
            
        }
    }

    private void CloseMe(bool value)
    {
        showErrorAlert = !value;
    }
}

