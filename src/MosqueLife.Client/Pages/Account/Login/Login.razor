@page "/authentication/login"

@layout LoginLayout

@inject Providers.TokenAuthenticationStateProvider TokenAuthenticationStateProvider
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@using System.ComponentModel.DataAnnotations
@using MosqueLife.Shared.Models.Authentication

@if (showErrorAlert)
{
    <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe(true))" >Invalid username or password!</MudAlert>
}

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="mt-4">Sign In</MudText>

    <MudText>Don't have an account? <MudLink Href="/authentication/register">Sign Up</MudLink></MudText>

    <MudTextField T="string" @bind-Value="@Email" Required="true" Label="E-mail " Variant="Variant.Outlined" Class="my-6"></MudTextField>

    <MudTextField @bind-Value="@Password" Label="Password " Required="true" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

    <div Class="d-flex justify-space-between align-center">
        <MudCheckBox T="bool" Label="Remember me?" @bind-Checked="RememberMe" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
        <MudSpacer />
        <MudLink Href="/authentication/forgot-password">Forgot pwd?</MudLink>
    </div>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success && !isBusy)" Size="Size.Large" FullWidth="true" OnClick="() => HandleSubmit()">Sign In</MudButton>
</MudForm>

@code {
    private bool showErrorAlert;

    private string Password { get; set; } = string.Empty;
    private string Email { get; set; } =  string.Empty;
    private bool RememberMe { get; set; } = default;

    private bool isBusy = default;

    private LoginCommand model = new LoginCommand();
    private bool success;

    private string[] errors = { };
    private MudForm? form;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; } = string.Empty;

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; } = string.Empty;
    }

    private async Task HandleSubmit()
    {
        isBusy = false;
        success = false;
        model = new LoginCommand
        {
            Email = Email,
            Password = Password,
            RememberMe = RememberMe
        };

        var response = await HttpClient.PostAsJsonAsync("api/account/login", model);
        var loginResult = await response.Content.ReadFromJsonAsync<LoginResult>();
        if (loginResult?.Successful == true)
        {
            await TokenAuthenticationStateProvider.Login(loginResult.Token);
            NavigationManager.NavigateTo("/personal/dashboard");
        }
        else
        {
            showErrorAlert = true;
            Console.WriteLine("Invalid username or password");
        }

    }

    private async Task OnValidSubmit(EditContext context)
    {
        //success = true;
        //StateHasChanged();

        var response = await HttpClient.PostAsJsonAsync("api/account/login", model);
        var loginResult = await response.Content.ReadFromJsonAsync<LoginResult>();
        if (loginResult?.Successful == true)
        {
            await TokenAuthenticationStateProvider.Login(loginResult.Token);
            NavigationManager.NavigateTo("/personal/dashboard");
        }
        else
        {
            showErrorAlert = true;
        }
    }

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private void CloseMe(bool value)
    {
        showErrorAlert = !value;
    }
}